>> Failed: Header {}, Variable {}, Type {}: BUG MAX NEVER LESS THAN MIN".format(__header__, key, obj_level_2['Type'])
>> Failed: Header {}, Variable {}, Type {}: BUG".format(__header__, key, obj_level_2['Type'])
>> Failed: Header {}, Variable {}, Type {}: May be constant {}".format(__header__, key, obj_level_2['Type'], obj_level_2['Max'])
>> Failed: Header {}, Variable {}, Type {}: May be constant {}".format(__header__, key, value_find_type_enum, obj_level_2['Max'])
>> Failed: Header {}, Variable {}, Type {}: Missing MAX/MIN/MID: {} <=> {}".format(__header__, key, obj_level_2['Type'], "+-{}".format(obj_level_2['Max']), list_data_var)
>> Failed: Header {}, Variable {}, Type {}: Missing MAX: {} <=> {}".format(__header__, key, obj_level_2['Type'], obj_level_2['Max'], list_data_var)
>> Failed: Header {}, Variable {}, Type {}: Missing mid {}".format(__header__, key, obj_level_2['Type'], check_mid)
>> Failed: Header {}, Variable {}, Type {}: Missing mid {}".format(__header__, key, value_find_type_enum, check_mid)
>> Failed: Header {}, Variable {}, Type {}: Missing MIN: {} <=> {}".format(__header__, key, obj_level_2['Type'], obj_level_2['Min'], list_data_var)
>> Failed: Header {}, Variable {}, Type {}: Missing OUT RANGE MAX: {} <=> {}".format(__header__, key, obj_level_2['Type'], obj_level_2['Max'], max(list_data_var))
>> Failed: Header {}, Variable {}, Type {}: Missing OUT RANGE MIN: {} <=> {}".format(__header__, key, obj_level_2['Type'], obj_level_2['Min'], min(list_data_var))
>> Failed: Header {}, Variable {}, Type {}: None Mid because MAX = MIN".format(__header__, key, obj_level_2['Type'])
>> Failed: Header {}, Variable {}, Type {}: None Mid because MAX = MIN".format(__header__, key, value_find_type_enum)
>> Failed: Header {}, Variable {}, Type ENUM {}: Missing MAX {} <=> {}".format(__header__, key, value_find_type_enum, data_test_design['Enum'][value_find_type_enum][-1], list_data_var)
>> Failed: Header {}, Variable {}, Type ENUM {}: Missing MIN {} <=> {}".format(__header__, key, value_find_type_enum, data_test_design['Enum'][value_find_type_enum][0], list_data_var)
>> Failed: Header {}, Variable {}, Type ENUM {}: Please check your enum header that it hasn't any redundant table at here: {}".format(__header__, key, value_find_type_enum, list_data_var)
>> Failed: Header {}, Variable {}, Type ENUM with value {}: Can not find your type".format(__header__, key, current_type)
>> Failed: Item {} can not open file TPA. Please check at link: {}".format(data.get("ItemName").replace(".c", "") + ".c", file_tpa)
>> Failed: Item File Gif {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_gif)
>> Failed: Item File HTM {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_htm)
>> Failed: Item file_ATT_Prj {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_ATT_Prj)
>> Failed: Item FileATTReportXML {} got Verdict: {} - {}".format(data.get("ItemName"), data_ATT.get("CompleteVerdict"), data.get("Status Result"))
>> Failed: Item FileATTReportXML {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_ATT)
>> Failed: Item FileATTReportXML/FilePLT {} has missing TestModuleName: {} - {}".format(data.get("ItemName"), data_ATT.get("TestModuleName"), lst_file_PLT)
>> Failed: Item FileCoverageReasonXLS {} has different C0: {}/{}; C1: {}/{}; MCDC: {}/{}".format(data_CoverageReasonXLS.get("Item_Name").replace(".c", ""), data_CoverageReasonXLS.get("C0"), score_c0,
>> Failed: Item FilePLT {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_PLT)
>> Failed: Item FileRTRTCov {} has different C0: {}/{}; C1: {}/{}; MCDC: {}/{}".format(data.get("ItemName"), data_RTRT.get("C0"), score_c0,
>> Failed: Item FileRTRTCov {} has long path".format(data.get("ItemName").replace(".c", ""))
>> Failed: Item FileRTRTCov {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_RTRT)
>> Failed: Item FileTestDesignXLSX {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_test_design)
>> Failed: Item FileTestDesignXLSX {} has wrong extension. Please convert xls* to xlsm: {}".format(data.get("ItemName").replace(".c", ""), lst_file_test_design)
>> Failed: Item FileTestDesignXLSX {} with sheet {} has wrong information".format(data_test_design.get("ItemName"), __each_data__['sheetname'])
>> Failed: Item FileTestDesignXLSX has wrong format name: {}".format(os.path.basename(self.doc))
>> Failed: Item FileTestDesignXLSX/FileATTReportXML {} got ItemRevision: {} - {}".format(data.get("ItemName"), data_ATT.get("ClassVersion"), data.get("ItemRevision"))
>> Failed: Item FileTestDesignXLSX/FileATTReportXML {} got ItemRevision: {}/{} - {}".format(data.get("ItemName"), data_ATT.get("ClassVersion"), data_test_design.get("ItemRevision"), data.get("ItemRevision"))
>> Failed: Item FileTestDesignXLSX/FileATTReportXML has different name {} - {}".format(data_test_design.get("ItemName"), temp)
>> Failed: Item FileTestDesignXLSX/FilePLT {} has missing TestModuleName: {} - {}".format(data.get("ItemName"), data_test_design.get("TM"), lst_file_PLT)
>> Failed: Item FileTestReportXML {} has different C0: {}/{}; C1: {}/{}; MCDC: {}/{}".format(data_test_report_xml.get("testScriptName"), data_test_report_xml.get("C0"), score_c0,
>> Failed: Item FileTestSummaryHTML {} got different Verdict: {} - {}".format(data_test_summary.get("Project"), data_test_summary.get("Verdict"), data.get("Status Result"))
>> Failed: Item FileTestSummaryHTML {} has different C0: {}/{}; C1: {}/{}; MCDC: {}/{}".format(data_test_summary.get("Project"), data_test_summary.get("C0"), score_c0,
>> Failed: Item FileTestSummaryHTML {} has different name: {} - {}".format(sub_new_func, data_test_summary.get("Project"), sub_new_func)
>> Failed: Item FileTPA {} has different C0: {}/{}; C1: {}/{}".format(data_tpa.get("FileName").replace(".c", ""), data_test_summary.get("C0"), score_c0,
>> Failed: Item FileTPA {} has different C0: {}/{}; C1: {}/{}; MCDC: {}/{}".format(data_tpa.get("FileName").replace(".c", ""), data_test_summary.get("C0"), score_c0,
>> Failed: Item FileTPA {} has different time format %Y-%m-%dT%H:%M:%SZ: {}".format(data_tpa.get("FileName").replace(".c", ""), data_tpa.get("ExecutionDate"))
>> Failed: Item FileWalkThroughDoc {} has different Baseline: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("baseline"), temp_baseline)
>> Failed: Item FileWalkThroughDoc {} has different C0: {}/{}; C1: {}/{}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("C0"), score_c0,
>> Failed: Item FileWalkThroughDoc {} has none comment finding/impact: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('finding'),
>> Failed: Item FileWalkThroughDoc {} has none file: {}".format(data.get("ItemName").replace(".c", ""), lst_file_WT)
>> Failed: Item FileWalkThroughDoc {} has none OPL: {}".format(data_Walkthrough.get("project").replace(".c", ""), str(num_OPL))
>> Failed: Item FileWalkThroughDoc {} has OPL: {}".format(data_Walkthrough.get("project").replace(".c", ""), str(num_OPL))
>> Failed: Item FileWalkThroughDoc {} has wrong comment confirm UT26: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('confirm_UT26'), '""')
>> Failed: Item FileWalkThroughDoc {} has wrong comment confirm UT26: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('confirm_UT26'), '"No, Documented"')
>> Failed: Item FileWalkThroughDoc {} has wrong comment confirm UT26: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('confirm_UT26'), '"Yes, Documented"')
>> Failed: Item FileWalkThroughDoc {} has wrong comment confirm UT9: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('confirm_UT9'),
>> Failed: Item FileWalkThroughDoc {} has wrong comment finding/impact: {} - {}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get("tbl_finding").get('finding'),
>> Failed: Item FileWalkThroughDoc {} has wrong extension. Please convert doc* to docx: {}".format(data.get("ItemName").replace(".c", ""), lst_file_WT)
>> Failed: Item FileWalkThroughDoc {} has wrong ItemRevision: {} - {}".format(data.get("ItemName"), data_Walkthrough.get("ItemRevision"), data.get("ItemRevision"))
>> Failed: Item FileWalkThroughDoc {} has wrong name - {}".format(data_Walkthrough.get("project").replace(".c", ""), data.get("ItemName"))
>> Failed: Item FileWalkThroughDoc {} has wrong name - {}".format(data_Walkthrough.get("project").replace(".c", ""), sub_new_func)
>> Failed: Item FileWalkThroughDoc {} has wrong path: {}/{} - {}/{}".format(data_Walkthrough.get("project").replace(".c", ""), data_Walkthrough.get('path_testscript'), path_testscript,
>> Failed: Item FileWalkThroughDoc has different reviewer/tester {}/{} - {}/{}".format(data_Walkthrough.get("review partner"), convert_name(key=utils.load(CONST.SETTING, "users").get(data.get("Tester")).get("reviewer"), opt="name"), \
>> Failed: Item FileWalkThroughDoc has wrong format at Table Review Item: Coverage Report: \\nC0: <>%\\nC1: <>%\\nMCDC: <>%"
>> Failed: Item FileWalkThroughDoc has wrong format project: [Class] <V[Version]>"
>> Failed: Your comment is missing: {}".format(key)
>> Failed: Your input is missing or wrong type value: {} <=> {}".format(key, list_data_var)
